import { HttpResponseMessage } from "aurelia-http-client";
import { BindingEngine, Disposable } from "aurelia-binding";
import { TaskQueue } from "aurelia-task-queue";
import { EventAggregator } from "aurelia-event-aggregator";
import { Router } from "aurelia-router";
import { I18N } from "aurelia-i18n";
import { DialogService } from "aurelia-dialog";
import { ProgressIndicator } from "aurelia-progress";
import { NotificationManager } from "aurelia-notification";
import { CancelablePromise } from "aurelia-utils";
import { SecurityContext } from "aurelia-security";
import { LocalStorage } from "aurelia-storage";
import { EntityManager, EntityService, FilterObserver, FilterQuery, SearchQuery, SearchBooleanContext, Sorting, UserFilter } from "aurelia-persistence";
export declare abstract class TableViewModel<E> {
    static DEFAULT_LIMIT: number;
    static INFINITE_SCROLL_INCREMENT: number;
    protected bindingEngine: BindingEngine;
    protected eventAggregator: EventAggregator;
    protected taskQueue: TaskQueue;
    protected router: Router;
    protected i18n: I18N;
    protected dialogService: DialogService;
    protected localStorage: LocalStorage;
    protected notificationManager: NotificationManager;
    protected progressIndicator: ProgressIndicator;
    protected filterObserver: FilterObserver;
    protected securityContext: SecurityContext;
    protected entityManager: EntityManager;
    protected entityService: EntityService;
    protected title: string;
    protected newable: any;
    protected relation: string;
    protected properties: string[];
    protected params: Object;
    protected entities: E[];
    protected selected: E[];
    protected countTotal: number;
    protected countFilter: number;
    protected filters: UserFilter[];
    protected newFilter: UserFilter;
    protected filter: FilterQuery;
    protected search: SearchBooleanContext;
    protected sort: Sorting;
    protected limit: number;
    protected skip: number;
    protected filterBindings: Object;
    protected retrieveEntitiesPromise: CancelablePromise<HttpResponseMessage>;
    protected scrollLoading: boolean;
    protected disposables: Disposable[];
    constructor(newable: any, relation?: string);
    protected afterConstructor(): void;
    activate(params?: Object): Promise<E[]>;
    canDeactivate(): Promise<boolean>;
    deactivate(): Promise<any>;
    scrollListener(event: MouseEvent): void;
    filterField(property: string): void;
    filterCollection(collection: string, property: string): void;
    protected searchEntities(limit?: number, skip?: number): Promise<E[]>;
    protected filterEntities(limit?: number, skip?: number): Promise<E[]>;
    protected retrieveEntities(limit?: number, skip?: number, query?: SearchQuery): Promise<E[]>;
    protected replaceEntities(entities: E[]): E[];
    protected retrieveAndReplaceEntities(limit?: number, skip?: number): Promise<E[]>;
    protected concatenateEntities(entities: E[]): E[];
    protected infiniteScroll(): Promise<number>;
}

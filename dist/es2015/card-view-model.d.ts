import { BindingEngine, Disposable } from "aurelia-binding";
import { TaskQueue } from "aurelia-task-queue";
import { EventAggregator } from "aurelia-event-aggregator";
import { Router } from "aurelia-router";
import { I18N } from "aurelia-i18n";
import { DialogService } from "aurelia-dialog";
import { ProgressIndicator } from "aurelia-progress";
import { NotificationManager } from "aurelia-notification";
import { Validation, ValidationGroup } from "aurelia-validation";
import { EntityManager, EntityService, FilterObserver } from "aurelia-persistence";
import { SecurityContext } from "aurelia-security";
export declare abstract class CardViewModel<E> {
    protected bindingEngine: BindingEngine;
    protected eventAggregator: EventAggregator;
    protected taskQueue: TaskQueue;
    protected router: Router;
    protected i18n: I18N;
    protected dialogService: DialogService;
    protected notificationManager: NotificationManager;
    protected progressIndicator: ProgressIndicator;
    protected filterObserver: FilterObserver;
    protected entityManager: EntityManager;
    protected securityContext: SecurityContext;
    protected entityService: EntityService;
    protected title: string;
    protected newable: any;
    protected relation: string;
    protected properties: string[];
    protected entity: E;
    protected validation: Validation;
    protected entityValidation: ValidationGroup;
    protected disposables: Disposable[];
    constructor(newable: any, relation?: string);
    protected afterConstructor(): void;
    activate(entity: E): Promise<E>;
    canDeactivate(): Promise<boolean>;
    deactivate(): Promise<any>;
    protected setEntityValidationConstraints(): ValidationGroup;
    protected updateEntity(entity: E): Promise<E>;
}
